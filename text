import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:educonnect/donnees/modeles/utilisateur_modele.dart';
import 'package:educonnect/donnees/modeles/EnseignantModele.dart';
import 'page_message_detail.dart';
import 'package:educonnect/main.dart';

class MessagerieParentPage extends StatefulWidget {
  final String utilisateurId;
  final String etablissementId;
  final String parentId;

  const MessagerieParentPage({
    Key? key,
    required this.utilisateurId,
    required this.etablissementId,
    required this.parentId,
  }) : super(key: key);

  @override
  State<MessagerieParentPage> createState() => _MessagerieParentPageState();
}

class _MessagerieParentPageState extends State<MessagerieParentPage> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Map<String, UtilisateurModele> utilisateursMap = {};
  Map<String, List<String>> matieresParEnseignant = {};
  List<EnseignantModele> enseignants = [];

  bool isLoading = true;
  String? error;

  @override
  void initState() {
    super.initState();
    _loadInitialData();
  }

  Future<void> _loadInitialData() async {
    try {
      final enseignantsSnapshot = await _firestore.collection('enseignants').get();
      enseignants = enseignantsSnapshot.docs
          .map((doc) => EnseignantModele.fromMap(doc.data(), doc.id))
          .toList();

      final utilisateurIds = enseignants.map((e) => e.utilisateurId).toSet().toList();

      final utilisateursSnapshot = await _firestore
          .collection('utilisateurs')
          .where(FieldPath.documentId, whereIn: utilisateurIds)
          .where('etablissementId', isEqualTo: widget.etablissementId)
          .get();

      utilisateursMap = {
        for (var doc in utilisateursSnapshot.docs)
          doc.id: UtilisateurModele.fromMap(doc.data(), doc.id)
      };

      enseignants = enseignants.where((e) => utilisateursMap.containsKey(e.utilisateurId)).toList();

      await _loadMatieres();

      setState(() => isLoading = false);
    } catch (e, st) {
      print('‚ùå Erreur chargement init : $e\n$st');
      setState(() {
        error = e.toString();
        isLoading = false;
      });
    }
  }

  Future<void> _loadMatieres() async {
    final enseignantIds = enseignants.map((e) => e.id).toList();
    if (enseignantIds.isEmpty) return;

    final enseignementsSnapshot = await _firestore
        .collection('enseignements')
        .where('enseignantId', whereIn: enseignantIds)
        .get();

    final matiereIds = enseignementsSnapshot.docs
        .map((doc) => doc.data()['matiereId'] as String?)
        .whereType<String>()
        .toSet()
        .toList();

    final matieresSnapshot = await _firestore
        .collection('matieres')
        .where(FieldPath.documentId, whereIn: matiereIds)
        .get();

    final matieresMap = {
      for (var doc in matieresSnapshot.docs)
        doc.id: (doc.data()['nom'] ?? 'Inconnu') as String
    };

    final mapTemp = <String, List<String>>{};
    for (var doc in enseignementsSnapshot.docs) {
      final data = doc.data();
      final enseignantId = data['enseignantId'];
      final matiereId = data['matiereId'];
      if (enseignantId == null || matiereId == null) continue;

      final matiereNom = matieresMap[matiereId] ?? 'Inconnu';
      mapTemp.putIfAbsent(enseignantId, () => []).add(matiereNom);
    }

    matieresParEnseignant = mapTemp;
  }

  String? _getAppwriteImageUrl(String? fileId) {
    if (fileId == null || fileId.isEmpty) return null;
    const bucketId = '6854df330032c7be516c';
    return '${appwriteClient.endPoint}/storage/buckets/$bucketId/files/$fileId/view?project=${appwriteClient.config['project']}';
  }

  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }

    if (error != null) {
      return Scaffold(body: Center(child: Text("Erreur : $error")));
    }

    return Scaffold(
      body: StreamBuilder<QuerySnapshot>(
        stream: _firestore
            .collection('messages')
            .where('participants', arrayContains: widget.parentId)
            .orderBy('dateEnvoi', descending: true)
            .snapshots(),
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            final err = snapshot.error.toString();
            if (err.contains('FAILED_PRECONDITION') && err.contains('create index')) {
              final regex = RegExp(r'https:\/\/console\.firebase\.google\.com\S+');
              final match = regex.firstMatch(err);
              if (match != null) {
                final indexUrl = match.group(0);
                print("üì£‚ùóÔ∏èFirestore n√©cessite un index pour cette requ√™te !");
                print("üîó Cliquez ou copiez ce lien dans votre navigateur pour cr√©er l‚Äôindex :");
                print("üëâ $indexUrl");
              } else {
                print("‚ö†Ô∏è Erreur d'index d√©tect√©e, mais le lien n'a pas pu √™tre extrait automatiquement.");
                print("‚û°Ô∏è V√©rifie le message d‚Äôerreur complet ci-dessous :");
                print(err);
              }
            } else {
              print('‚ùå Erreur inconnue dans StreamBuilder : $err');
            }
            return Center(child: Text("Erreur : $err"));
          }

          if (!snapshot.hasData) return const Center(child: CircularProgressIndicator());

          final docs = snapshot.data!.docs;
          final Map<String, Map<String, dynamic>> dernierMessage = {};
          final Map<String, int> nbMessagesNonLus = {};

          for (var doc in docs) {
            final data = doc.data() as Map<String, dynamic>;
            final emetteurId = data['emetteurId'] ?? '';
            final recepteurId = data['recepteurId'] ?? '';
            final date = (data['dateEnvoi'] as Timestamp?)?.toDate();
            final message = data['contenu'] ?? '';
            final lu = data['lu'] ?? true;

            final autreId = emetteurId == widget.parentId ? recepteurId : emetteurId;

            print("üì® message: de=$emetteurId √†=$recepteurId contenu=$message");

            if (!enseignants.any((e) => e.id == autreId)) continue;

            if (dernierMessage[autreId] == null ||
                (date != null && date.isAfter(dernierMessage[autreId]?['date'] ?? DateTime(0)))) {
              dernierMessage[autreId] = {'message': message, 'date': date};
            }

            if (recepteurId == widget.parentId && !lu) {
              nbMessagesNonLus[autreId] = (nbMessagesNonLus[autreId] ?? 0) + 1;
            }
          }

          final enseignantsTrie = List<EnseignantModele>.from(enseignants);
          enseignantsTrie.sort((a, b) {
            final dateA = dernierMessage[a.id]?['date'] ?? DateTime(2000);
            final dateB = dernierMessage[b.id]?['date'] ?? DateTime(2000);
            return dateB.compareTo(dateA);
          });

          if (enseignantsTrie.isEmpty) {
            return const Center(child: Text("Aucun message trouv√©"));
          }

          return ListView.separated(
            padding: const EdgeInsets.all(12),
            itemCount: enseignantsTrie.length,
            separatorBuilder: (_, __) => const Divider(),
            itemBuilder: (context, index) {
              final enseignant = enseignantsTrie[index];
              final utilisateur = utilisateursMap[enseignant.utilisateurId];
              if (utilisateur == null) return const SizedBox();

              final matieres = matieresParEnseignant[enseignant.id] ?? [];
              final photoUrl = _getAppwriteImageUrl(utilisateur.photo);
              final statutColor = utilisateur.statut ? Colors.green : Colors.grey;
              final message = dernierMessage[enseignant.id]?['message'] ?? 'Aucun message';
              final nbNonLus = nbMessagesNonLus[enseignant.id] ?? 0;

              return ListTile(
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (_) => PageMessageDetailParent(
                        parentId: widget.parentId,
                        enseignantId: enseignant.id,
                        enseignantNom: '${utilisateur.prenom} ${utilisateur.nom}',
                        enseignantPhotoFileId: utilisateur.photo,
                      ),
                    ),
                  );
                },
                leading: Stack(
                  children: [
                    CircleAvatar(
                      radius: 28,
                      backgroundImage: photoUrl != null ? NetworkImage(photoUrl) : null,
                      backgroundColor: Colors.grey.shade300,
                      child: photoUrl == null
                          ? const Icon(Icons.person, color: Colors.white)
                          : null,
                    ),
                    Positioned(
                      right: 0,
                      bottom: 0,
                      child: Container(
                        width: 10,
                        height: 10,
                        decoration: BoxDecoration(
                          color: statutColor,
                          shape: BoxShape.circle,
                          border: Border.all(color: Colors.white, width: 2),
                        ),
                      ),
                    )
                  ],
                ),
                title: Text('${utilisateur.prenom} ${utilisateur.nom}',
                    style: const TextStyle(fontWeight: FontWeight.bold)),
                subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(message, maxLines: 1, overflow: TextOverflow.ellipsis),
                    if (matieres.isNotEmpty)
                      Text("Mati√®res : ${matieres.join(', ')}",
                          style: const TextStyle(fontSize: 12)),
                  ],
                ),
                trailing: nbNonLus > 0
                    ? CircleAvatar(
                        radius: 12,
                        backgroundColor: Colors.red,
                        child: Text(
                          '$nbNonLus',
                          style: const TextStyle(color: Colors.white, fontSize: 12),
                        ),
                      )
                    : const Icon(Icons.chat_bubble_outline),
              );
            },
          );
        },
      ),
    );
  }
}
